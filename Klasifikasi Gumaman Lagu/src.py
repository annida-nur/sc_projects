# -*- coding: utf-8 -*-
"""[last] Fungsi 1 - Klasifikasi Gumaman.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PkVDPU-EWTrkWAjDx7FqhHIpsVLNZXCH

# **Library & Drive**
"""

from google.colab import drive
drive.mount('/content/drive')

pip install tensorflow.io

from IPython.display import Audio

import tensorflow as tf
import tensorflow_io as tfio
import matplotlib.pyplot as plt
import numpy as np
import glob

#pip install python_speech_features

import os
import librosa
import pickle
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from tqdm import tqdm
from sklearn.preprocessing import LabelEncoder, OneHotEncoder
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix
from keras.layers import Conv2D, MaxPool2D, Flatten, Dense, Dropout
from keras.models import Sequential
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
#from python_speech_features import mfcc

"""# **Load Data Gumaman**"""

daftar_gdangdut = glob.glob('/content/drive/MyDrive/Dataset01/Dangdut/Gumam/*')
daftar_gkpop = glob.glob('/content/drive/MyDrive/Dataset01/KPop/Gumam/*')

#baca file dan masukin ke list
gumaman_dangdut =[]
for i in range(len(daftar_gdangdut)):
  gumam = tf.io.read_file(daftar_gdangdut[i])
  suara = tfio.audio.decode_mp3(gumam)
  gumaman_dangdut.append(suara)


gumaman_kpop =[]
for i in range(len(daftar_gkpop)):
  gumam = tf.io.read_file(daftar_gkpop[i])
  suara = tfio.audio.decode_mp3(gumam)
  gumaman_kpop.append(suara)

gumaman_kpop

#train
x=[]
y=[]

#mencacah/motong lagu
for j in range(len(daftar_gdangdut)):
  for i in range(0, len(gumaman_dangdut[j])-44100, 11025):
    x.append(gumaman_dangdut[j][i:i+44100])
    y.append(0)

for j in range(len(daftar_gkpop)):
  for i in range(0, len(gumaman_kpop[j])-44100, 11025):
    x.append(gumaman_kpop[j][i:i+44100])
    y.append(1)

x = np.asarray(x)
y = np.asarray(y)

y
#y.shape

label_encoder = LabelEncoder()
label_encoded = label_encoder.fit_transform(y)

label_encoded

label_encoded=label_encoded[:,np.newaxis]

label_encoded

one_hot_encoder = OneHotEncoder(sparse=False)
one_hot_encoded = one_hot_encoder.fit_transform(label_encoded)

one_hot_encoded

y = one_hot_encoded

maks = np.max(x)
mins = np.min(x)

#normalisasi
x = (x-mins)/(maks-mins)
#y = (y-mins)/(maks-mins)

x

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2)

print(x.shape)
print(x_train.shape)
print(y_train.shape)
print(x_test.shape)
print(y_test.shape)

"""# **Model**"""

# CNN 1D
from keras.models import Sequential
from keras.layers import Conv1D, MaxPooling1D, Flatten, Dense, Activation

#size_ = 8 #inputnya ada 8, dr pclass-embarked

model = Sequential()

model.add(Conv1D(128, kernel_size=3, input_shape = (x.shape[1],1), activation = 'relu'))
model.add(Flatten())

model.add(Dense(64, activation='relu'))
model.add(Dense(32, activation='relu'))
model.add(Dense(16, activation='relu'))
model.add(Dense(32, activation='relu'))
model.add(Dense(64, activation='relu'))

#model.add(Dense(units = 8, activation = 'relu'))
model.add(Dense(units = 2, activation = 'softmax'))

model.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics=['accuracy'])

model.fit(x_train,y_train, batch_size=20, epochs=50)

#model.save_weights('f1_classifiergumam.h5')
#read file
model.load_weights('/content/drive/MyDrive/Dataset01/f1_classifiergumam.h5')

lur = model.predict(x_test)

lur

lur[50]

predictions = np.argmax(lur, axis=1)
y_test = one_hot_encoder.inverse_transform(y_test)

predictions

predict = pd.DataFrame(predictions)

predict

predict[(predict[0]==1)].shape

print(predictions)

y_test

accuracy_score(predictions, y_test)

"""# **Predict with new file**"""

ftest = '/content/drive/MyDrive/Dataset01/KPop/Gumam/Akdong Musician - Give Love.mp3'

ftest

f_Test = tf.io.read_file(ftest)
s_Test = tfio.audio.decode_mp3(f_Test)

s_Test

input = []
for i in range(0, len(s_Test)-44100, 11025):
    input.append(s_Test[i:i+44100])

input = np.asarray(input)
maks = np.max(input)
min = np.min(input)

input = (input-min)/(maks-min)

input.shape

hasil = model.predict(input)
hasil = np.argmax(hasil,axis=1)

hasil

hasil = pd.DataFrame(hasil)
jmlh_0 = hasil[(hasil[0]==0)].shape[0]
jmlh_1 = hasil[(hasil[0]==1)].shape[0]


if jmlh_0 > jmlh_1 :
  print('dangdut')
elif jmlh_0 < jmlh_1 :
  print('kpop')
else :
  print('not known')